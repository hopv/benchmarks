(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/adt/fold_div.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |f_33[0:0]| ( Int) Bool)
(declare-fun |fold_left[0:5][0:0]| ( Int  Int  Int) Bool)
(declare-fun |fold_left[0:0][0:3][0:0]| ( Int  Int  Int) Bool)
(declare-fun |fold_left[0:0][0:1]| ( Int  Int) Bool)
(declare-fun |fold_left[0:3][0:1][0:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |make_list[0:1][0:1][0:1][0:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |make_list[0:1][0:1][0:0]| ( Int  Int  Int) Bool)
(declare-fun |fold_left[0:3][0:0]| ( Int  Int  Int) Bool)
(declare-fun |fold_left[0:2]| ( Int  Int) Bool)
(declare-fun |randpos[0:1][0:0]| ( Int  Int) Bool)
(declare-fun |randpos[0:0]| ( Int) Bool)
(declare-fun |make_list[0:1][0:0]| ( Int  Int) Bool)
(declare-fun |make_list[0:0]| ( Int) Bool)
(assert (not (exists ((x0 Int)) (|f_33[0:0]| x0))))
(assert (forall ((x0 Int)(var53 Int)(var55 Int)(var54 Int)) (=> (and (|fold_left[0:5][0:0]| var53 var55 x0) (|make_list[0:1][0:0]| var54 var55)) (|f_33[0:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(var56 Int)) (=> (and (|fold_left[0:3][0:1][0:0]| x1 x2 0 var56) (and (|fold_left[0:2]| x1 x2) (and (|fold_left[0:0][0:3][0:0]| x1 var56 x3) (<= 1 x2)))) (|fold_left[0:5][0:0]| x1 x2 x3))))
(assert (forall ((x3 Int)(x4 Int)(x5 Int)(x0 Int)(x2 Int)) (=> (and (|make_list[0:1][0:0]| x0 x2) (and (|fold_left[0:0][0:1]| x3 x4) (and (= x5 0) (= x4 0)))) (|fold_left[0:0][0:3][0:0]| x3 x4 x5))))
(assert (forall ((x3 Int)(x4 Int)(var59 Int)) (=> (and (|fold_left[0:3][0:1][0:0]| x3 var59 0 x4) (and (|fold_left[0:2]| x3 var59) (<= 1 var59))) (|fold_left[0:0][0:1]| x3 x4))))
(assert (forall ((x3 Int)(x4 Int)(x1 Int)(x2 Int)(x0 Int)) (=> (and (|fold_left[0:2]| x3 x4) (and (|make_list[0:1][0:1][0:1][0:0]| x0 x4 x1 x2) (|make_list[0:1][0:0]| x0 x4))) (|fold_left[0:3][0:1][0:0]| x3 x4 x1 x2))))
(assert (forall ((x2 Int)(x3 Int)(x0 Int)(x1 Int)(var64 Int)(var67 Int)(var66 Int)(var65 Int)) (=> (and (|make_list[0:1][0:1][0:0]| x2 var64 x0) (and (|make_list[0:1][0:0]| var66 var67) (and (|randpos[0:1][0:0]| var65 x1) (and (|make_list[0:1][0:0]| x2 x3) (and (|make_list[0:0]| x2) (and (= var64 (+ 1 var67)) (and (= x3 (+ 1 var67)) (and (= (+ 1 var66) x2) (and (= x0 0) (>= x2 1)))))))))) (|make_list[0:1][0:1][0:1][0:0]| x2 x3 x0 x1))))
(assert (forall ((x3 Int)(x1 Int)(x2 Int)(x0 Int)) (=> (and (|make_list[0:0]| x3) (and (|fold_left[0:3][0:0]| x0 x1 x2) (|make_list[0:1][0:0]| x3 x1))) (|make_list[0:1][0:1][0:0]| x3 x1 x2))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (|fold_left[0:2]| x1 x2) (and (= x3 0) (<= 1 x2))) (|fold_left[0:3][0:0]| x1 x2 x3))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (|make_list[0:1][0:0]| x0 x2) (|fold_left[0:2]| x1 x2))))
(assert (forall ((x0 Int)(x1 Int)(var70 Int)(var71 Int)(var68 Int)(var69 Int)) (=> (and (|randpos[0:1][0:0]| var68 var69) (and (|make_list[0:1][0:0]| var70 var71) (and (|make_list[0:0]| x0) (and (= (+ 1 var70) x0) (and (= x1 (+ 1 var71)) (>= x0 1)))))) (|make_list[0:1][0:0]| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|randpos[0:0]| x0) (>= x1 1)) (|randpos[0:1][0:0]| x0 x1))))
(assert (forall ((x0 Int)(x1 Int)(var72 Int)(x2 Int)) (=> (and (|make_list[0:0]| x1) (and (|make_list[0:1][0:0]| var72 x2) (and (>= x1 1) (= (+ 1 var72) x1)))) (|randpos[0:0]| x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|make_list[0:0]| x1) (and (= x0 0) (<= x1 0))) (|make_list[0:1][0:0]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|make_list[0:0]| x1) (and (= (+ 1 x0) x1) (>= x1 1))) (|make_list[0:0]| x0))))
(assert (forall ((x0 Int)) (|make_list[0:0]| x0)))
(check-sat)
(get-model)
(exit)
