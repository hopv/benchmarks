(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/adt/forall_eq_pair.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_26[107:0]| ( Int) Bool)
(declare-fun |for_all[28:3][102:0]| ( Int  Bool) Bool)
(declare-fun |for_all[85:3][88:0]| ( Int  Bool) Bool)
(declare-fun |for_all[85:1]| ( Int) Bool)
(declare-fun |for_all[28:0][69:2][75:0]| ( Int  Int  Bool) Bool)
(declare-fun |for_all[28:0][69:1]| ( Int  Int) Bool)
(declare-fun |for_all[28:2][36:1][55:1]| ( Int  Int  Int  Int) Bool)
(declare-fun |make_list[12:1][24:1][40:1][51:1]| ( Int  Int  Int  Int  Int) Bool)
(declare-fun |make_list[12:1][24:1][40:0]| ( Int  Int  Int) Bool)
(declare-fun |for_all[28:2][36:0]| ( Int  Int) Bool)
(declare-fun |for_all[28:1]| ( Int) Bool)
(declare-fun |make_list[12:1][24:0]| ( Int  Int) Bool)
(declare-fun |make_list[15:1][18:0]| ( Int  Int) Bool)
(declare-fun |make_list[15:0]| ( Int) Bool)
(declare-fun |make_list[12:0]| ( Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_26[107:0]| x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|for_all[28:3][102:0]| x2 false) (|make_list[12:1][24:0]| x1 x2)) (|fail_26[107:0]| x0))))
(assert (forall ((x1 Int)(x2 Bool)(var30 Int)(var34 Bool)(var31 Bool)(var32 Int)(var33 Int)) (=> (and (|for_all[85:3][88:0]| var30 var31) (and (|for_all[28:2][36:1][55:1]| x1 0 var32 var33) (and (|for_all[28:1]| x1) (and (|for_all[28:0][69:2][75:0]| var32 var33 var34) (and (<= 1 x1) (and (= (+ 1 var30) x1) (= x2 (and var34 var31)))))))) (|for_all[28:3][102:0]| x1 x2))))
(assert (forall ((x1 Int)(x0 Bool)) (=> (and (|for_all[85:1]| x1) (and (<= x1 0) x0)) (|for_all[85:3][88:0]| x1 x0))))
(assert (forall ((x2 Int)(x3 Int)(x0 Int)(x1 Int)(x4 Bool)) (=> (and (|for_all[28:2][36:1][55:1]| x3 0 x0 x1) (and (|for_all[28:1]| x3) (and (|for_all[28:0][69:2][75:0]| x0 x1 x4) (and (= (+ 1 x2) x3) (>= x3 1))))) (|for_all[85:1]| x2))))
(assert (forall ((x2 Int)(x3 Int)(x4 Bool)(x0 Int)(x1 Int)) (=> (and (|make_list[12:1][24:0]| x0 x1) (and (|for_all[28:0][69:1]| x2 x3) (= x4 (= x2 x3)))) (|for_all[28:0][69:2][75:0]| x2 x3 x4))))
(assert (forall ((x2 Int)(x3 Int)(var37 Int)) (=> (and (|for_all[28:2][36:1][55:1]| var37 0 x2 x3) (and (|for_all[28:1]| var37) (<= 1 var37))) (|for_all[28:0][69:1]| x2 x3))))
(assert (forall ((x4 Int)(x1 Int)(x2 Int)(x3 Int)(x0 Int)) (=> (and (|for_all[28:1]| x4) (and (|make_list[12:1][24:1][40:1][51:1]| x0 x4 x1 x2 x3) (|make_list[12:1][24:0]| x0 x4))) (|for_all[28:2][36:1][55:1]| x4 x1 x2 x3))))
(assert (forall ((x3 Int)(x4 Int)(x0 Int)(x1 Int)(x2 Int)(var40 Int)(var42 Int)(var41 Int)) (=> (and (|make_list[12:1][24:1][40:0]| x3 var40 x0) (and (|make_list[15:1][18:0]| var41 var42) (and (|make_list[12:1][24:0]| x3 x4) (and (|make_list[12:0]| x3) (and (= var40 (+ 1 var42)) (and (= x4 (+ 1 var42)) (and (= (+ 1 var41) x3) (and (= x0 0) (and (>= x3 0) (and (= x2 x1) (= x2 x3))))))))))) (|make_list[12:1][24:1][40:1][51:1]| x3 x4 x0 x1 x2))))
(assert (forall ((x2 Int)(x0 Int)(x1 Int)) (=> (and (|make_list[12:0]| x2) (and (|for_all[28:2][36:0]| x0 x1) (|make_list[12:1][24:0]| x2 x0))) (|make_list[12:1][24:1][40:0]| x2 x0 x1))))
(assert (forall ((x1 Int)(x2 Int)) (=> (and (|for_all[28:1]| x1) (and (= x2 0) (<= 1 x1))) (|for_all[28:2][36:0]| x1 x2))))
(assert (forall ((x1 Int)(x0 Int)) (=> (|make_list[12:1][24:0]| x0 x1) (|for_all[28:1]| x1))))
(assert (forall ((x0 Int)(x1 Int)(var44 Int)(var43 Int)) (=> (and (|make_list[12:0]| x0) (and (|make_list[15:1][18:0]| var43 var44) (and (= x1 (+ 1 var44)) (and (>= x0 0) (= (+ 1 var43) x0))))) (|make_list[12:1][24:0]| x0 x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|make_list[15:0]| x1) (and (= x0 0) (<= (+ 1 x1) 0))) (|make_list[15:1][18:0]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|make_list[12:0]| x1) (and (= (+ 1 x0) x1) (>= x1 0))) (|make_list[15:0]| x0))))
(assert (forall ((x0 Int)) (|make_list[12:0]| x0)))
(check-sat)
(get-model)
(exit)
