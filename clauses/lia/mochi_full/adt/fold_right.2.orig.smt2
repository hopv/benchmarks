(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/adt/fold_right.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_28[150:0]| ( Int) Bool)
(declare-fun |fold_right[71:4][145:0]| ( Int  Int  Int) Bool)
(declare-fun |fold_right[71:0][121:2][127:0]| ( Int  Int  Int) Bool)
(declare-fun |fold_right[71:0][121:1]| ( Int  Int) Bool)
(declare-fun |fold_right[106:4][109:0]| ( Int  Int  Int) Bool)
(declare-fun |fold_right[106:3]| ( Int  Int) Bool)
(declare-fun |fold_right[71:2][79:1][98:0]| ( Int  Int  Int) Bool)
(declare-fun |make_list[55:1][67:1][83:1][94:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |make_list[55:1][67:1][83:0]| ( Int  Int  Int) Bool)
(declare-fun |fold_right[71:2][79:0]| ( Int  Int) Bool)
(declare-fun |fold_right[71:3]| ( Int  Int) Bool)
(declare-fun |make_list[55:1][67:0]| ( Int  Int) Bool)
(declare-fun |make_list[58:1][61:0]| ( Int  Int) Bool)
(declare-fun |make_list[58:0]| ( Int) Bool)
(declare-fun |make_list[55:0]| ( Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_28[150:0]| x0))))
(assert (forall ((x0 Int)(x4 Int)(x2 Int)(x3 Int)(x1 Int)) (=> (and (|fold_right[71:4][145:0]| x3 x2 x4) (and (|make_list[55:1][67:0]| x1 x3) (<= (+ 1 x4) x2))) (|fail_28[150:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(var166 Int)(var168 Int)(var167 Int)) (=> (and (|fold_right[106:4][109:0]| var166 x2 var168) (and (|fold_right[71:2][79:1][98:0]| x1 0 var167) (and (|fold_right[71:3]| x1 x2) (and (|fold_right[71:0][121:2][127:0]| var167 var168 x3) (and (<= 1 x1) (= (+ 1 var166) x1)))))) (|fold_right[71:4][145:0]| x1 x2 x3))))
(assert (forall ((x3 Int)(x4 Int)(x5 Int)(x0 Int)(x2 Int)) (=> (and (|make_list[55:1][67:0]| x0 x2) (and (|fold_right[71:0][121:1]| x3 x4) (= x5 (+ x3 x4)))) (|fold_right[71:0][121:2][127:0]| x3 x4 x5))))
(assert (forall ((x3 Int)(x4 Int)(var171 Int)(var173 Int)(var172 Int)) (=> (and (|fold_right[106:4][109:0]| var171 var172 x4) (and (|fold_right[71:3]| var173 var172) (and (|fold_right[71:2][79:1][98:0]| var173 0 x3) (and (= (+ 1 var171) var173) (<= 1 var173))))) (|fold_right[71:0][121:1]| x3 x4))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|fold_right[106:3]| x1 x2) (and (<= x1 0) (= x0 x2))) (|fold_right[106:4][109:0]| x1 x2 x0))))
(assert (forall ((x3 Int)(x0 Int)(x2 Int)(x1 Int)) (=> (and (|fold_right[71:3]| x2 x0) (and (|fold_right[71:2][79:1][98:0]| x2 0 x1) (and (= (+ 1 x3) x2) (>= x2 1)))) (|fold_right[106:3]| x3 x0))))
(assert (forall ((x2 Int)(x3 Int)(x4 Int)(x0 Int)) (=> (and (|make_list[55:1][67:1][83:1][94:0]| x0 x2 x3 x4) (|make_list[55:1][67:0]| x0 x2)) (|fold_right[71:2][79:1][98:0]| x2 x3 x4))))
(assert (forall ((x2 Int)(x3 Int)(x0 Int)(x1 Int)(var176 Int)(var178 Int)(var177 Int)) (=> (and (|make_list[55:1][67:1][83:0]| x2 var176 x0) (and (|make_list[58:1][61:0]| var177 var178) (and (|make_list[55:1][67:0]| x2 x3) (and (|make_list[55:0]| x2) (and (= var176 (+ 1 var178)) (and (= x3 (+ 1 var178)) (and (= (+ 1 var177) x2) (and (= x0 0) (and (>= x2 0) (= x1 x2)))))))))) (|make_list[55:1][67:1][83:1][94:0]| x2 x3 x0 x1))))
(assert (forall ((x3 Int)(x1 Int)(x2 Int)) (=> (and (|make_list[55:0]| x3) (and (|fold_right[71:2][79:0]| x1 x2) (|make_list[55:1][67:0]| x3 x1))) (|make_list[55:1][67:1][83:0]| x3 x1 x2))))
(assert (forall ((x2 Int)(x3 Int)(x0 Int)) (=> (and (|fold_right[71:3]| x2 x0) (and (= x3 0) (<= 1 x2))) (|fold_right[71:2][79:0]| x2 x3))))
(assert (forall ((x2 Int)(x1 Int)(x0 Int)) (=> (|make_list[55:1][67:0]| x0 x2) (|fold_right[71:3]| x2 x1))))
(assert (forall ((x0 Int)(x1 Int)(var181 Int)(var180 Int)) (=> (and (|make_list[55:0]| x0) (and (|make_list[58:1][61:0]| var180 var181) (and (= x1 (+ 1 var181)) (and (>= x0 0) (= (+ 1 var180) x0))))) (|make_list[55:1][67:0]| x0 x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|make_list[58:0]| x1) (and (= x0 0) (<= (+ 1 x1) 0))) (|make_list[58:1][61:0]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|make_list[55:0]| x1) (and (= (+ 1 x0) x1) (>= x1 0))) (|make_list[58:0]| x0))))
(assert (forall ((x0 Int)) (|make_list[55:0]| x0)))
(check-sat)
(get-model)
(exit)
