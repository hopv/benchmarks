(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/adt/fun_list.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_53[748:0]| ( Int) Bool)
(declare-fun |for_all[653:3][743:0]| ( Int  Bool) Bool)
(declare-fun |for_all[726:3][729:0]| ( Int  Bool) Bool)
(declare-fun |for_all[726:1]| ( Int) Bool)
(declare-fun |for_all[653:0][710:1][716:0]| ( Int  Bool) Bool)
(declare-fun |for_all[653:0][710:0]| ( Int) Bool)
(declare-fun |for_all[653:2][661:1][696:0]| ( Int  Int  Int) Bool)
(declare-fun |map[523:3][649:1][665:1][692:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |map[523:3][649:1][665:0]| ( Int  Int  Int) Bool)
(declare-fun |for_all[653:2][661:0]| ( Int  Int) Bool)
(declare-fun |for_all[653:1]| ( Int) Bool)
(declare-fun |map[523:3][649:0]| ( Int  Int) Bool)
(declare-fun |map[523:0][565:1][627:0]| ( Int) Bool)
(declare-fun |map[523:0][565:0][571:1][621:0]| ( Int  Int) Bool)
(declare-fun |map[523:2][531:1][542:0][589:1][603:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |map[523:2][531:1][542:0][589:0]| ( Int  Int  Int) Bool)
(declare-fun |map[523:2][531:0]| ( Int  Int) Bool)
(declare-fun |map[550:3][553:0]| ( Int  Int) Bool)
(declare-fun |map[523:0][565:0][571:0]| ( Int) Bool)
(declare-fun |map[550:1]| ( Int) Bool)
(declare-fun |map[523:1]| ( Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_53[748:0]| x0))))
(assert (forall ((x0 Int)(x2 Int)) (=> (and (|for_all[653:3][743:0]| x2 false) (|map[523:3][649:0]| 3 x2)) (|fail_53[748:0]| x0))))
(assert (forall ((x1 Int)(x2 Bool)(var556 Int)(var559 Bool)(var557 Bool)(var558 Int)) (=> (and (|for_all[726:3][729:0]| var556 var557) (and (|for_all[653:2][661:1][696:0]| x1 0 var558) (and (|for_all[653:1]| x1) (and (|for_all[653:0][710:1][716:0]| var558 var559) (and (<= 1 x1) (and (= (+ 1 var556) x1) (= x2 (and var559 var557)))))))) (|for_all[653:3][743:0]| x1 x2))))
(assert (forall ((x1 Int)(x0 Bool)) (=> (and (|for_all[726:1]| x1) (and (<= x1 0) x0)) (|for_all[726:3][729:0]| x1 x0))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Bool)) (=> (and (|for_all[653:2][661:1][696:0]| x2 0 x0) (and (|for_all[653:1]| x2) (and (|for_all[653:0][710:1][716:0]| x0 x3) (and (= (+ 1 x1) x2) (>= x2 1))))) (|for_all[726:1]| x1))))
(assert (forall ((x2 Int)(x3 Bool)(x1 Int)) (=> (and (|for_all[653:0][710:0]| x2) (and (|map[523:3][649:0]| 3 x1) (= x3 (>= x2 0)))) (|for_all[653:0][710:1][716:0]| x2 x3))))
(assert (forall ((x2 Int)(var560 Int)) (=> (and (|for_all[653:2][661:1][696:0]| var560 0 x2) (and (|for_all[653:1]| var560) (<= 1 var560))) (|for_all[653:0][710:0]| x2))))
(assert (forall ((x3 Int)(x1 Int)(x2 Int)) (=> (and (|for_all[653:1]| x3) (and (|map[523:3][649:1][665:1][692:0]| 3 x3 x1 x2) (|map[523:3][649:0]| 3 x3))) (|for_all[653:2][661:1][696:0]| x3 x1 x2))))
(assert (forall ((x3 Int)(x4 Int)(x1 Int)(x2 Int)(var564 Int)(var566 Int)(var565 Int)) (=> (and (|map[523:3][649:1][665:0]| x3 var564 x1) (and (|map[550:3][553:0]| var565 var566) (and (|map[523:3][649:0]| x3 x4) (and (|map[523:0][565:1][627:0]| x2) (and (|map[523:1]| x3) (and (= var564 (+ 1 var566)) (and (= x4 (+ 1 var566)) (and (= (+ 1 var565) x3) (and (= x1 0) (<= 1 x3)))))))))) (|map[523:3][649:1][665:1][692:0]| x3 x4 x1 x2))))
(assert (forall ((x3 Int)(x1 Int)(x2 Int)) (=> (and (|map[523:1]| x3) (and (|for_all[653:2][661:0]| x1 x2) (and (|map[523:3][649:0]| 3 x1) (= x3 3)))) (|map[523:3][649:1][665:0]| x3 x1 x2))))
(assert (forall ((x1 Int)(x2 Int)) (=> (and (|for_all[653:1]| x1) (and (= x2 0) (<= 1 x1))) (|for_all[653:2][661:0]| x1 x2))))
(assert (forall ((x1 Int)) (=> (|map[523:3][649:0]| 3 x1) (|for_all[653:1]| x1))))
(assert (forall ((x1 Int)(x2 Int)(var567 Int)(var568 Int)(var569 Int)) (=> (and (|map[550:3][553:0]| var567 var568) (and (|map[523:0][565:1][627:0]| var569) (and (|map[523:1]| x1) (and (<= 1 x1) (and (= (+ 1 var567) x1) (= x2 (+ 1 var568))))))) (|map[523:3][649:0]| x1 x2))))
(assert (forall ((x1 Int)) (=> (|map[523:0][565:0][571:1][621:0]| 0 x1) (|map[523:0][565:1][627:0]| x1))))
(assert (forall ((x2 Int)(x3 Int)(var570 Int)(var572 Int)(var571 Int)) (=> (and (|map[550:3][553:0]| var570 var571) (and (|map[523:2][531:1][542:0][589:1][603:0]| var572 0 x2 x3) (and (|map[523:1]| var572) (and (= (+ 1 var570) var572) (<= 1 var572))))) (|map[523:0][565:0][571:1][621:0]| x2 x3))))
(assert (forall ((x4 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|map[523:1]| x4) (and (|map[523:2][531:0]| 3 x1) (and (|map[523:2][531:1][542:0][589:0]| 3 0 x2) (and (= x4 3) (and (= x1 0) (= x3 x2)))))) (|map[523:2][531:1][542:0][589:1][603:0]| x4 x1 x2 x3))))
(assert (forall ((x2 Int)(x3 Int)(x1 Int)(var573 Int)(var574 Int)) (=> (and (|map[523:2][531:0]| x2 x3) (and (|map[550:3][553:0]| var573 var574) (and (|map[523:0][565:0][571:0]| x1) (and (|map[523:1]| x2) (and (= x3 0) (and (<= 1 x2) (= (+ 1 var573) x2))))))) (|map[523:2][531:1][542:0][589:0]| x2 x3 x1))))
(assert (forall ((x1 Int)) (=> (= x1 0) (|map[523:0][565:0][571:0]| x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|map[550:1]| x1) (and (= x0 0) (<= x1 0))) (|map[550:3][553:0]| x1 x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|map[523:1]| x0) (and (= (+ 1 x1) x0) (>= x0 1))) (|map[550:1]| x1))))
(assert (forall ((x1 Int)(x2 Int)) (=> (and (|map[523:1]| x1) (and (= x2 0) (<= 1 x1))) (|map[523:2][531:0]| x1 x2))))
(assert (forall ((x0 Int)) (=> (= x0 3) (|map[523:1]| x0))))
(check-sat)
(get-model)
(exit)
