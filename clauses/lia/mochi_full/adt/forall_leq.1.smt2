(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/adt/forall_leq.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_28[0:0]| ( Int) Bool)
(declare-fun |for_all[0:3][0:0]| ( Int  Bool) Bool)
(declare-fun |for_all[0:0][0:1][0:0]| ( Int  Bool) Bool)
(declare-fun |for_all[0:0][0:0]| ( Int) Bool)
(declare-fun |for_all[0:2][0:1][0:0]| ( Int  Int  Int) Bool)
(declare-fun |make_list[0:1][0:1][0:1][0:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |make_list[0:1][0:1][0:0]| ( Int  Int  Int) Bool)
(declare-fun |for_all[0:2][0:0]| ( Int  Int) Bool)
(declare-fun |for_all[0:1]| ( Int) Bool)
(declare-fun |make_list[0:1][0:0]| ( Int  Int) Bool)
(declare-fun |make_list[0:0]| ( Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_28[0:0]| x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|for_all[0:3][0:0]| x2 false) (|make_list[0:1][0:0]| x1 x2)) (|fail_28[0:0]| x0))))
(assert (forall ((x1 Int)(x2 Bool)(var29 Int)(var32 Bool)(var30 Bool)(var31 Int)) (=> (and (|for_all[0:3][0:0]| var29 var30) (and (|for_all[0:2][0:1][0:0]| x1 0 var31) (and (|for_all[0:1]| x1) (and (|for_all[0:0][0:1][0:0]| var31 var32) (and (<= 1 x1) (and (= (+ 1 var29) x1) (= x2 (and var32 var30)))))))) (|for_all[0:3][0:0]| x1 x2))))
(assert (forall ((x1 Int)(x0 Bool)) (=> (and (|for_all[0:1]| x1) (and (<= x1 0) x0)) (|for_all[0:3][0:0]| x1 x0))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Bool)) (=> (and (|for_all[0:2][0:1][0:0]| x2 0 x0) (and (|for_all[0:1]| x2) (and (|for_all[0:0][0:1][0:0]| x0 x3) (and (= (+ 1 x1) x2) (>= x2 1))))) (|for_all[0:1]| x1))))
(assert (forall ((x2 Int)(x3 Bool)(x0 Int)(x1 Int)) (=> (and (|make_list[0:1][0:0]| x0 x1) (and (|for_all[0:0][0:0]| x2) (= x3 (>= x2 0)))) (|for_all[0:0][0:1][0:0]| x2 x3))))
(assert (forall ((x2 Int)(var35 Int)) (=> (and (|for_all[0:2][0:1][0:0]| var35 0 x2) (and (|for_all[0:1]| var35) (<= 1 var35))) (|for_all[0:0][0:0]| x2))))
(assert (forall ((x3 Int)(x1 Int)(x2 Int)(x0 Int)) (=> (and (|for_all[0:1]| x3) (and (|make_list[0:1][0:1][0:1][0:0]| x0 x3 x1 x2) (|make_list[0:1][0:0]| x0 x3))) (|for_all[0:2][0:1][0:0]| x3 x1 x2))))
(assert (forall ((x2 Int)(x3 Int)(x0 Int)(x1 Int)(var38 Int)(var40 Int)(var39 Int)) (=> (and (|make_list[0:1][0:1][0:0]| x2 var38 x0) (and (|make_list[0:1][0:0]| var39 var40) (and (|make_list[0:1][0:0]| x2 x3) (and (|make_list[0:0]| x2) (and (= var38 (+ 1 var40)) (and (= x3 (+ 1 var40)) (and (= (+ 1 var39) x2) (and (= x0 0) (and (>= x2 0) (= x1 x2)))))))))) (|make_list[0:1][0:1][0:1][0:0]| x2 x3 x0 x1))))
(assert (forall ((x2 Int)(x0 Int)(x1 Int)) (=> (and (|make_list[0:0]| x2) (and (|for_all[0:2][0:0]| x0 x1) (|make_list[0:1][0:0]| x2 x0))) (|make_list[0:1][0:1][0:0]| x2 x0 x1))))
(assert (forall ((x1 Int)(x2 Int)) (=> (and (|for_all[0:1]| x1) (and (= x2 0) (<= 1 x1))) (|for_all[0:2][0:0]| x1 x2))))
(assert (forall ((x1 Int)(x0 Int)) (=> (|make_list[0:1][0:0]| x0 x1) (|for_all[0:1]| x1))))
(assert (forall ((x0 Int)(x1 Int)(var42 Int)(var41 Int)) (=> (and (|make_list[0:0]| x0) (and (|make_list[0:1][0:0]| var41 var42) (and (= x1 (+ 1 var42)) (and (>= x0 0) (= (+ 1 var41) x0))))) (|make_list[0:1][0:0]| x0 x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|make_list[0:0]| x1) (and (= x0 0) (<= (+ 1 x1) 0))) (|make_list[0:1][0:0]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|make_list[0:0]| x1) (and (= (+ 1 x0) x1) (>= x1 0))) (|make_list[0:0]| x0))))
(assert (forall ((x0 Int)) (|make_list[0:0]| x0)))
(check-sat)
(get-model)
(exit)
