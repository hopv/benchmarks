(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/adt/fold_fun_list.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_35[45:0]| ( Int) Bool)
(declare-fun |fold_right[19:4][22:0][28:1][38:0]| ( Int  Int  Int) Bool)
(declare-fun |fold_right[19:3][30:1][36:0]| ( Int  Int  Int) Bool)
(declare-fun |fold_right[19:3][30:0]| ( Int  Int) Bool)
(declare-fun |fold_right[19:4][22:0][28:0]| ( Int  Int) Bool)
(declare-fun |fold_right[19:1]| ( Int) Bool)
(declare-fun |make_list[12:1][15:0]| ( Int  Int) Bool)
(declare-fun |make_list[12:0]| ( Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_35[45:0]| x0))))
(assert (forall ((x0 Int)(x3 Int)(x2 Int)(x1 Int)) (=> (and (|fold_right[19:4][22:0][28:1][38:0]| x2 0 x3) (and (|make_list[12:1][15:0]| x1 x2) (<= (+ 1 x3) 0))) (|fail_35[45:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|fold_right[19:1]| x0) (and (|fold_right[19:3][30:1][36:0]| x0 x1 x2) (<= x0 0))) (|fold_right[19:4][22:0][28:1][38:0]| x0 x1 x2))))
(assert (forall ((x3 Int)(x1 Int)(x2 Int)(x0 Int)) (=> (and (|fold_right[19:1]| x3) (and (|fold_right[19:3][30:0]| x3 x1) (and (|make_list[12:1][15:0]| x0 x3) (= x2 x1)))) (|fold_right[19:3][30:1][36:0]| x3 x1 x2))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|fold_right[19:1]| x0) (and (|fold_right[19:4][22:0][28:0]| x0 x1) (<= x0 0))) (|fold_right[19:3][30:0]| x0 x1))))
(assert (forall ((x2 Int)(x1 Int)(x0 Int)) (=> (and (|fold_right[19:1]| x2) (and (|make_list[12:1][15:0]| x0 x2) (= x1 0))) (|fold_right[19:4][22:0][28:0]| x2 x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (|make_list[12:1][15:0]| x0 x1) (|fold_right[19:1]| x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|make_list[12:0]| x1) (and (= x0 0) (<= x1 0))) (|make_list[12:1][15:0]| x1 x0))))
(assert (forall ((x0 Int)) (|make_list[12:0]| x0)))
(check-sat)
(get-model)
(exit)
