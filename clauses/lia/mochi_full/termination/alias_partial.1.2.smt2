(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/termination/alias_partial.1.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_218[0:0]| ( Int) Bool)
(declare-fun |f[0:3][0:0][0:2]| ( Bool  Int  Int  Bool  Int  Int) Bool)
(declare-fun |f[0:2]| ( Bool  Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_218[0:0]| x0))))
(assert (forall ((x0 Int)(var47 Int)(var45 Bool)(var46 Int)(x1 Int)(x2 Int)) (=> (and (|f[0:2]| var45 var46 var47) (and (|f[0:3][0:0][0:2]| var45 var46 var47 true x1 x2) (<= var47 0))) (|fail_218[0:0]| x0))))
(assert (forall ((x4 Bool)(x5 Int)(x6 Int)(x1 Bool)(x2 Int)(x3 Int)(x0 Int)) (=> (and (|f[0:2]| x4 x5 x0) (and (|f[0:3][0:0][0:2]| x4 x5 x0 x1 x2 x3) (and (|f[0:2]| x4 x5 x6) (and (>= x0 1) (= (+ 1 x6) x0))))) (|f[0:3][0:0][0:2]| x4 x5 x6 x1 x2 x3))))
(assert (forall ((x3 Bool)(x4 Int)(x5 Int)(x0 Bool)(x1 Int)(x2 Int)) (=> (and (|f[0:2]| x3 x4 x5) (and (= x4 0) (and (= x5 1) (and (= x1 0) (and (= x2 2) (and (not x3) (not x0))))))) (|f[0:3][0:0][0:2]| x3 x4 x5 x0 x1 x2))))
(assert (forall ((x1 Bool)(x2 Int)(x0 Int)(x3 Int)) (=> (and (|f[0:2]| x1 x2 x3) (and (= (+ 1 x0) x3) (>= x3 1))) (|f[0:2]| x1 x2 x0))))
(assert (forall ((x2 Bool)(x0 Int)(x1 Int)) (=> (and (= x0 0) (and (= x1 1) (not x2))) (|f[0:2]| x2 x0 x1))))
(check-sat)
(get-model)
(exit)
