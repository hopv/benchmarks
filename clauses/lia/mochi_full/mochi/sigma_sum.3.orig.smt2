(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/mochi/sigma_sum.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_15[117:0]| ( Int) Bool)
(declare-fun |sigma[78:2][112:0]| ( Int  Int) Bool)
(declare-fun |sigma[101:2][104:0]| ( Int  Int) Bool)
(declare-fun |sigma[101:1]| ( Int) Bool)
(declare-fun |sigma[78:0][81:1][97:0]| ( Int  Int) Bool)
(declare-fun |sum[83:1][95:0]| ( Int  Int) Bool)
(declare-fun |sum[86:1][89:0]| ( Int  Int) Bool)
(declare-fun |sum[86:0]| ( Int) Bool)
(declare-fun |sum[83:0]| ( Int) Bool)
(declare-fun |sigma[78:0][81:0]| ( Int) Bool)
(declare-fun |sigma[78:1]| ( Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_15[117:0]| x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|sigma[78:2][112:0]| x1 x2) (<= (+ 1 x2) x1)) (|fail_15[117:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(var90 Int)(var89 Int)(var88 Int)) (=> (and (|sigma[101:2][104:0]| var88 var89) (and (|sigma[78:1]| x0) (and (|sigma[78:0][81:1][97:0]| x0 var90) (and (= x1 (+ var90 var89)) (and (= (+ 1 var88) x0) (>= x0 1)))))) (|sigma[78:2][112:0]| x0 x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|sigma[101:1]| x1) (and (= x0 0) (<= x1 0))) (|sigma[101:2][104:0]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|sigma[78:1]| x1) (and (|sigma[78:0][81:1][97:0]| x1 x2) (and (= (+ 1 x0) x1) (>= x1 1)))) (|sigma[101:1]| x0))))
(assert (forall ((x1 Int)(x2 Int)) (=> (|sum[83:1][95:0]| x1 x2) (|sigma[78:0][81:1][97:0]| x1 x2))))
(assert (forall ((x0 Int)(x1 Int)(var92 Int)(var91 Int)) (=> (and (|sum[83:0]| x0) (and (|sum[86:1][89:0]| var91 var92) (and (= x1 (+ x0 var92)) (and (>= x0 1) (= (+ 1 var91) x0))))) (|sum[83:1][95:0]| x0 x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|sum[86:0]| x1) (and (= x0 0) (<= x1 0))) (|sum[86:1][89:0]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|sum[83:0]| x1) (and (= (+ 1 x0) x1) (>= x1 1))) (|sum[86:0]| x0))))
(assert (forall ((x1 Int)) (=> (|sigma[78:0][81:0]| x1) (|sum[83:0]| x1))))
(assert (forall ((x0 Int)) (=> (and (|sigma[78:1]| x0) (>= x0 1)) (|sigma[78:0][81:0]| x0))))
(assert (forall ((x0 Int)) (|sigma[78:1]| x0)))
(check-sat)
(get-model)
(exit)
