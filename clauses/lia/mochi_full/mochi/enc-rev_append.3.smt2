(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/mochi/enc-rev_append.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_23[0:0]| ( Int) Bool)
(declare-fun |append[0:2][0:0]| ( Int  Int  Int) Bool)
(declare-fun |append[0:1]| ( Int  Int) Bool)
(declare-fun |rev[0:1][0:0]| ( Int  Int) Bool)
(declare-fun |rev[0:0]| ( Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_23[0:0]| x0))))
(assert (forall ((x0 Int)(x4 Int)(x3 Int)(x2 Int)) (=> (and (|append[0:2][0:0]| x3 x2 x4) (and (|rev[0:1][0:0]| x3 x3) (not (= x4 (+ x3 x2))))) (|fail_23[0:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(var120 Int)(var119 Int)) (=> (and (|append[0:1]| x0 x1) (and (|append[0:2][0:0]| var119 x1 var120) (and (= x2 (+ 1 var120)) (and (not (= x0 0)) (= (+ 1 var119) x0))))) (|append[0:2][0:0]| x0 x1 x2))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|append[0:1]| x1 x2) (and (= x1 0) (= x0 x2))) (|append[0:2][0:0]| x1 x2 x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|append[0:1]| x1 x2) (and (= (+ 1 x0) x1) (not (= x1 0)))) (|append[0:1]| x0 x2))))
(assert (forall ((x1 Int)(x0 Int)) (=> (|rev[0:1][0:0]| x1 x1) (|append[0:1]| x1 x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|rev[0:0]| x1) (and (= x0 0) (= x1 0))) (|rev[0:1][0:0]| x1 x0))))
(assert (forall ((x0 Int)) (|rev[0:0]| x0)))
(check-sat)
(get-model)
(exit)
