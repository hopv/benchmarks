(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/mochi/gib.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_23[143:0]| ( Int) Bool)
(declare-fun |gib[112:3][138:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |gib[125:3][128:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |gib[125:2]| ( Int  Int  Int) Bool)
(declare-fun |gib[118:3][121:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |gib[118:2]| ( Int  Int  Int) Bool)
(declare-fun |gib[112:2]| ( Int  Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_23[143:0]| x0))))
(assert (forall ((x0 Int)(x4 Int)(x3 Int)) (=> (and (|gib[112:3][138:0]| 0 1 x3 x4) (<= (+ 1 x4) 0)) (|fail_23[143:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x4 Int)(var97 Int)(var95 Int)(var98 Int)(var96 Int)) (=> (and (|gib[125:3][128:0]| x1 x2 var95 var96) (and (|gib[118:3][121:0]| x1 x2 var97 var98) (and (|gib[112:2]| x1 x2 x3) (and (not (= x3 0)) (and (not (= x3 1)) (and (= (+ 1 var97) x3) (and (= (+ 2 var95) x3) (= x4 (+ var98 var96))))))))) (|gib[112:3][138:0]| x1 x2 x3 x4))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x0 Int)) (=> (and (|gib[125:2]| x1 x2 x3) (and (= x3 0) (= x0 x1))) (|gib[125:3][128:0]| x1 x2 x3 x0))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Int)(var99 Int)(x4 Int)) (=> (and (|gib[118:3][121:0]| x1 x2 var99 x4) (and (|gib[112:2]| x1 x2 x3) (and (= (+ 2 x0) x3) (and (= (+ 1 var99) x3) (and (not (= x3 0)) (not (= x3 1))))))) (|gib[125:2]| x1 x2 x0))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x0 Int)) (=> (and (|gib[118:2]| x1 x2 x3) (and (= x3 0) (= x0 x1))) (|gib[118:3][121:0]| x1 x2 x3 x0))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Int)) (=> (and (|gib[112:2]| x1 x2 x3) (and (= (+ 1 x0) x3) (and (not (= x3 0)) (not (= x3 1))))) (|gib[118:2]| x1 x2 x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (= x0 0) (= x1 1)) (|gib[112:2]| x0 x1 x2))))
(check-sat)
(get-model)
(exit)
