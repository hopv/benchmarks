(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/mochi/enc-zip_map.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_20[123:0]| ( Int) Bool)
(declare-fun |map[115:1][118:0]| ( Int  Int) Bool)
(declare-fun |map[115:0]| ( Int) Bool)
(declare-fun |zip[89:2][111:0]| ( Int  Int  Int) Bool)
(declare-fun |zip[95:2][103:0]| ( Int  Int  Int) Bool)
(declare-fun |zip[95:1]| ( Int  Int) Bool)
(declare-fun |zip[89:1]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_20[123:0]| x0))))
(assert (forall ((x0 Int)(x3 Int)(x1 Int)(x2 Int)) (=> (and (|map[115:1][118:0]| x2 x3) (and (|zip[89:2][111:0]| x1 x1 x2) (<= (+ 1 x3) x1))) (|fail_20[123:0]| x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|map[115:0]| x1) (and (= x0 0) (= x1 0))) (|map[115:1][118:0]| x1 x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (|zip[89:2][111:0]| x0 x0 x1) (|map[115:0]| x1))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(var82 Int)(var83 Int)(var84 Int)) (=> (and (|zip[95:2][103:0]| var82 var83 var84) (and (|zip[89:1]| x1 x2) (and (not (= x1 0)) (and (= (+ 1 var82) x1) (and (= (+ 1 var83) x2) (and (= x3 (+ 1 var84)) (not (= x2 0)))))))) (|zip[89:2][111:0]| x1 x2 x3))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (|zip[95:1]| x1 x2) (and (= x2 0) (and (= x1 0) (= x3 0)))) (|zip[95:2][103:0]| x1 x2 x3))))
(assert (forall ((x1 Int)(x0 Int)(x3 Int)(x2 Int)) (=> (and (|zip[89:1]| x2 x3) (and (= (+ 1 x0) x3) (and (= (+ 1 x1) x2) (and (not (= x2 0)) (not (= x3 0)))))) (|zip[95:1]| x1 x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (= x1 x0) (|zip[89:1]| x1 x0))))
(check-sat)
(get-model)
(exit)
