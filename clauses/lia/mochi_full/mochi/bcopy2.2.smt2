(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/mochi/bcopy2.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_19[0:0]| ( Int) Bool)
(declare-fun |bcopy_aux[0:2][0:0]| ( Int  Int) Bool)
(declare-fun |bcopy_aux[0:1][0:1][0:0]| ( Int  Int  Int) Bool)
(declare-fun |bcopy_aux[0:1][0:0]| ( Int  Int) Bool)
(declare-fun |bcopy_aux[0:3]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_19[0:0]| x0))))
(assert (forall ((x0 Int)(var70 Int)(x2 Int)(x1 Int)) (=> (and (|bcopy_aux[0:2][0:0]| var70 x1) (and (>= var70 1) (and (<= var70 x2) (or (>= 0 (+ 1 x1)) (>= x1 x2))))) (|fail_19[0:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(var71 Int)) (=> (and (|bcopy_aux[0:3]| x1 x2) (and (|bcopy_aux[0:1][0:1][0:0]| x1 x2 var71) (<= (+ 1 x2) x1))) (|bcopy_aux[0:2][0:0]| x1 x2))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)) (=> (and (|bcopy_aux[0:1][0:0]| x1 x2) (and (= x3 0) (and (<= 0 x2) (and (<= (+ 1 x2) x1) (>= x1 1))))) (|bcopy_aux[0:1][0:1][0:0]| x1 x2 x3))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|bcopy_aux[0:3]| x0 x1) (<= (+ 1 x1) x0)) (|bcopy_aux[0:1][0:0]| x0 x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (= x0 0) (>= x1 1)) (|bcopy_aux[0:3]| x1 x0))))
(check-sat)
(get-model)
(exit)
