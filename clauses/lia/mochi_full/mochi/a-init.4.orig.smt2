(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/mochi/a-init.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_28[270:0]| ( Int) Bool)
(declare-fun |init[211:3][224:0][231:1][263:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |init[214:3][222:0][233:1][261:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |init[217:3][220:0][235:1][259:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |init[217:2][237:1][257:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |init[214:2][244:1][251:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |init[214:2][244:0]| ( Int  Int  Int) Bool)
(declare-fun |init[217:2][237:0]| ( Int  Int  Int) Bool)
(declare-fun |init[217:3][220:0][235:0]| ( Int  Int  Int) Bool)
(declare-fun |init[214:3][222:0][233:0]| ( Int  Int  Int) Bool)
(declare-fun |init[217:1]| ( Int  Int) Bool)
(declare-fun |init[211:3][224:0][231:0]| ( Int  Int  Int) Bool)
(declare-fun |init[214:1]| ( Int  Int) Bool)
(declare-fun |init[211:1]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_28[270:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x3 Int)(x4 Int)) (=> (and (|init[211:3][224:0][231:1][263:0]| 0 x3 x1 x4) (and (<= (+ 1 x1) x3) (and (<= 0 x1) (<= x4 0)))) (|fail_28[270:0]| x0))))
(assert (forall ((x0 Int)(x2 Int)(x3 Int)(x4 Int)(x1 Int)) (=> (and (|init[211:1]| x0 x2) (and (|init[214:3][222:0][233:1][261:0]| x1 x2 x3 x4) (and (= x1 (+ 1 x0)) (<= (+ 1 x0) x2)))) (|init[211:3][224:0][231:1][263:0]| x0 x2 x3 x4))))
(assert (forall ((x0 Int)(x2 Int)(x3 Int)(x4 Int)(x1 Int)) (=> (and (|init[214:1]| x0 x2) (and (|init[217:3][220:0][235:1][259:0]| x1 x2 x3 x4) (and (= x1 (+ 1 x0)) (<= (+ 1 x0) x2)))) (|init[214:3][222:0][233:1][261:0]| x0 x2 x3 x4))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|init[217:1]| x0 x1) (and (|init[217:2][237:1][257:0]| x0 x1 x2 x3) (>= x0 x1))) (|init[217:3][220:0][235:1][259:0]| x0 x1 x2 x3))))
(assert (forall ((x3 Int)(x4 Int)(x1 Int)(x2 Int)(x0 Int)(var209 Int)(var208 Int)(var207 Int)) (=> (and (|init[214:1]| x0 x4) (and (|init[217:1]| x3 x4) (and (|init[214:1]| x0 var209) (and (|init[217:2][237:0]| var208 var209 x1) (and (|init[214:1]| x0 var207) (and (|init[214:2][244:1][251:0]| x0 var207 x1 x2) (and (<= (+ 1 x0) var209) (and (= var208 (+ 1 x0)) (and (<= (+ 1 x0) var207) (and (= x3 (+ 1 x0)) (and (<= (+ 1 x0) x4) (or (<= (+ 1 x1) x0) (>= x1 (+ 1 x0)))))))))))))) (|init[217:2][237:1][257:0]| x3 x4 x1 x2))))
(assert (forall ((x3 Int)(x4 Int)(x1 Int)(x2 Int)(var211 Int)(var210 Int)) (=> (and (|init[211:1]| x1 x4) (and (|init[214:1]| x3 x4) (and (|init[211:1]| x1 var211) (and (|init[214:2][244:0]| var210 var211 x1) (and (<= (+ 1 x1) var211) (and (= var210 (+ 1 x1)) (and (= x2 1) (and (= x3 (+ 1 x1)) (<= (+ 1 x1) x4))))))))) (|init[214:2][244:1][251:0]| x3 x4 x1 x2))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)(var213 Int)(var212 Int)) (=> (and (|init[214:1]| x1 x0) (and (|init[214:1]| x1 var213) (and (|init[217:2][237:0]| var212 var213 x2) (and (<= (+ 1 x1) var213) (and (= var212 (+ 1 x1)) (and (<= (+ 1 x1) x0) (or (<= (+ 1 x2) x1) (>= x2 (+ 1 x1))))))))) (|init[214:2][244:0]| x1 x0 x2))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|init[217:1]| x0 x1) (and (|init[217:3][220:0][235:0]| x0 x1 x2) (>= x0 x1))) (|init[217:2][237:0]| x0 x1 x2))))
(assert (forall ((x2 Int)(x3 Int)(x1 Int)(x0 Int)) (=> (and (|init[214:1]| x0 x3) (and (|init[214:3][222:0][233:0]| x0 x3 x1) (and (|init[217:1]| x2 x3) (and (<= (+ 1 x0) x3) (= x2 (+ 1 x0)))))) (|init[217:3][220:0][235:0]| x2 x3 x1))))
(assert (forall ((x2 Int)(x3 Int)(x1 Int)(x0 Int)) (=> (and (|init[211:1]| x0 x3) (and (|init[211:3][224:0][231:0]| x0 x3 x1) (and (|init[214:1]| x2 x3) (and (<= (+ 1 x0) x3) (= x2 (+ 1 x0)))))) (|init[214:3][222:0][233:0]| x2 x3 x1))))
(assert (forall ((x2 Int)(x3 Int)(x1 Int)) (=> (and (|init[211:1]| x2 x3) (and (= x2 0) (and (<= 0 x1) (<= (+ 1 x1) x3)))) (|init[211:3][224:0][231:0]| x2 x3 x1))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|init[214:1]| x1 x2) (and (= x0 (+ 1 x1)) (<= (+ 1 x1) x2))) (|init[217:1]| x0 x2))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|init[211:1]| x1 x2) (and (= x0 (+ 1 x1)) (<= (+ 1 x1) x2))) (|init[214:1]| x0 x2))))
(assert (forall ((x0 Int)(x1 Int)) (=> (= x0 0) (|init[211:1]| x0 x1))))
(check-sat)
(get-model)
(exit)
