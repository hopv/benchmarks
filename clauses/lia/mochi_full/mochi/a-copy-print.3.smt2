(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/mochi/a-copy-print.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_28[0:0]| ( Int) Bool)
(declare-fun |bcopy[0:3][0:1][0:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |bcopy[0:3][0:0]| ( Int  Int  Int) Bool)
(declare-fun |bcopy[0:2][0:1][0:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |bcopy[0:2][0:0]| ( Int  Int  Int) Bool)
(declare-fun |bcopy[0:4]| ( Int  Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_28[0:0]| x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|bcopy[0:2][0:0]| x2 x2 x1) (and (>= x2 1) (or (>= 0 (+ 1 x1)) (>= x1 x2)))) (|fail_28[0:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x0 Int)(var274 Int)(var275 Int)) (=> (and (|bcopy[0:2][0:0]| x1 x2 x3) (and (|bcopy[0:2][0:1][0:0]| x1 x2 x0 var274) (and (|bcopy[0:4]| x1 x2 x0) (and (|bcopy[0:3][0:1][0:0]| x1 x2 x0 var275) (<= (+ 1 x0) x2))))) (|bcopy[0:2][0:0]| x1 x2 x3))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|bcopy[0:4]| x0 x1 x2) (<= (+ 1 x2) x1)) (|bcopy[0:2][0:0]| x0 x1 x2))))
(assert (forall ((x2 Int)(x3 Int)(x0 Int)(x1 Int)(x5 Int)(x4 Int)) (=> (and (|bcopy[0:2][0:1][0:0]| x2 x3 x1 x5) (and (|bcopy[0:4]| x2 x3 x1) (and (|bcopy[0:3][0:1][0:0]| x2 x3 x1 x4) (and (= x0 (+ 1 x1)) (<= (+ 1 x1) x3))))) (|bcopy[0:4]| x2 x3 x0))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)(x3 Int)) (=> (and (|bcopy[0:3][0:0]| x1 x1 x2) (and (= x3 0) (and (<= 0 x2) (and (<= (+ 1 x2) x1) (and (>= x1 1) (= x1 x0)))))) (|bcopy[0:3][0:1][0:0]| x1 x0 x2 x3))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(var276 Int)) (=> (and (|bcopy[0:4]| x1 x2 x3) (and (|bcopy[0:2][0:1][0:0]| x1 x2 x3 var276) (<= (+ 1 x3) x2))) (|bcopy[0:3][0:0]| x1 x2 x3))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)(x3 Int)) (=> (and (|bcopy[0:2][0:0]| x1 x1 x2) (and (= x3 0) (and (<= 0 x2) (and (<= (+ 1 x2) x1) (and (>= x1 1) (= x1 x0)))))) (|bcopy[0:2][0:1][0:0]| x1 x0 x2 x3))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|bcopy[0:4]| x0 x1 x2) (<= (+ 1 x2) x1)) (|bcopy[0:2][0:0]| x0 x1 x2))))
(assert (forall ((x2 Int)(x1 Int)(x0 Int)) (=> (and (= x0 0) (and (>= x2 1) (= x2 x1))) (|bcopy[0:4]| x2 x1 x0))))
(check-sat)
(get-model)
(exit)
