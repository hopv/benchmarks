(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/mochi/kmp.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |loopShift[233:4]| ( Int  Int  Int  Int) Bool)
(declare-fun |fail_48[292:0]| ( Int) Bool)
(declare-fun |make_array[287:2]| ( Int  Int  Int) Bool)
(declare-fun |loop[240:2][281:0]| ( Int  Int  Int) Bool)
(declare-fun |loop[240:4][248:1][271:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |make_array[254:3][265:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |make_array[254:2]| ( Int  Int  Int) Bool)
(declare-fun |loop[240:4][248:0]| ( Int  Int  Int) Bool)
(declare-fun |loop[240:6]| ( Int  Int  Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_48[292:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)) (=> (and (|make_array[287:2]| x2 x3 x1) (or (>= 0 (+ 1 x1)) (>= x1 x2))) (|fail_48[292:0]| x0))))
(assert (forall ((x3 Int)(x1 Int)(x4 Int)(x2 Int)) (=> (and (|loop[240:2][281:0]| x3 x2 x4) (and (>= x2 1) (>= x3 1))) (|make_array[287:2]| x3 x1 x4))))
(assert (forall ((x3 Int)(x4 Int)(x5 Int)(var1123 Int)(var1124 Int)) (=> (and (|loop[240:6]| x3 x4 var1123 x5) (and (|loop[240:4][248:1][271:0]| x3 x4 var1123 var1124) (and (<= (+ 1 var1123) x4) (<= (+ 1 x5) x3)))) (|loop[240:2][281:0]| x3 x4 x5))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)(var1125 Int)) (=> (and (|make_array[254:3][265:0]| x1 var1125 x2 x3) (and (>= x1 1) (>= x0 1))) (|loop[240:4][248:1][271:0]| x0 x1 x2 x3))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Int)) (=> (and (|make_array[254:2]| x1 x2 x0) (and (<= 0 x0) (and (<= (+ 1 x0) x1) (= x3 x2)))) (|make_array[254:3][265:0]| x1 x2 x0 x3))))
(assert (forall ((x3 Int)(x0 Int)(x4 Int)(var1126 Int)) (=> (and (|loop[240:4][248:0]| var1126 x3 x4) (and (>= x3 1) (>= var1126 1))) (|make_array[254:2]| x3 x0 x4))))
(assert (forall ((x3 Int)(x4 Int)(x5 Int)(var1127 Int)) (=> (and (|loop[240:6]| x3 x4 x5 var1127) (and (<= (+ 1 var1127) x3) (<= (+ 1 x5) x4))) (|loop[240:4][248:0]| x3 x4 x5))))
(assert (forall ((x2 Int)(x3 Int)(x0 Int)(x1 Int)) (=> (and (= x0 0) (and (= x1 0) (and (>= x3 1) (>= x2 1)))) (|loop[240:6]| x2 x3 x0 x1))))
(assert (forall ((x3 Int)(x2 Int)(x0 Int)(x1 Int)) (=> (and (= x0 (- 1)) (and (= x1 1) (and (>= x2 1) (>= x3 1)))) (|loopShift[233:4]| x3 x2 x0 x1))))
(check-sat)
(get-model)
(exit)
