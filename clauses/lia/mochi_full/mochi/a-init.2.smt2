(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/mochi/a-init.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_25[0:0]| ( Int) Bool)
(declare-fun |init[0:2][0:0]| ( Int  Int  Int) Bool)
(declare-fun |init[0:3][0:0][0:0]| ( Int  Int  Int) Bool)
(declare-fun |init[0:1]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_25[0:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|init[0:2][0:0]| 0 x2 x1) (or (>= 0 (+ 1 x1)) (>= x1 x2))) (|fail_25[0:0]| x0))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)(var68 Int)(var67 Int)) (=> (and (|init[0:1]| x1 x0) (and (|init[0:1]| x1 var68) (and (|init[0:2][0:0]| var67 var68 x2) (and (<= (+ 1 x1) var68) (and (= var67 (+ 1 x1)) (and (<= (+ 1 x1) x0) (or (<= (+ 1 x2) x1) (>= x2 (+ 1 x1))))))))) (|init[0:2][0:0]| x1 x0 x2))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|init[0:1]| x0 x1) (and (|init[0:3][0:0][0:0]| x0 x1 x2) (>= x0 x1))) (|init[0:2][0:0]| x0 x1 x2))))
(assert (forall ((x2 Int)(x3 Int)(x1 Int)(x0 Int)) (=> (and (|init[0:1]| x0 x3) (and (|init[0:3][0:0][0:0]| x0 x3 x1) (and (|init[0:1]| x2 x3) (and (<= (+ 1 x0) x3) (= x2 (+ 1 x0)))))) (|init[0:3][0:0][0:0]| x2 x3 x1))))
(assert (forall ((x2 Int)(x3 Int)(x1 Int)) (=> (and (|init[0:1]| x2 x3) (and (= x2 0) (and (<= 0 x1) (<= (+ 1 x1) x3)))) (|init[0:3][0:0][0:0]| x2 x3 x1))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|init[0:1]| x1 x2) (and (= x0 (+ 1 x1)) (<= (+ 1 x1) x2))) (|init[0:1]| x0 x2))))
(assert (forall ((x0 Int)(x1 Int)) (=> (= x0 0) (|init[0:1]| x0 x1))))
(check-sat)
(get-model)
(exit)
