(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/mochi/bcopy4.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_14[64:0]| ( Int) Bool)
(declare-fun |bcopy_aux[58:3]| ( Int  Int) Bool)
(declare-fun |bcopy_aux[32:1][44:1][50:0]| ( Int  Int  Int) Bool)
(declare-fun |bcopy_aux[32:1][44:0]| ( Int  Int) Bool)
(declare-fun |bcopy_aux[32:3]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_14[64:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|bcopy_aux[58:3]| x2 x1) (and (>= 0 (+ 1 x1)) (<= (+ 1 x1) x2))) (|fail_14[64:0]| x0))))
(assert (forall ((x2 Int)(x0 Int)(x1 Int)(x4 Int)) (=> (and (|bcopy_aux[32:3]| x2 x1) (and (|bcopy_aux[32:1][44:1][50:0]| x2 x1 x4) (and (= x0 (+ 1 x1)) (and (<= 0 x1) (<= (+ 1 x1) x2))))) (|bcopy_aux[58:3]| x2 x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(var91 Int)) (=> (and (|bcopy_aux[32:1][44:0]| var91 x1) (= x2 0)) (|bcopy_aux[32:1][44:1][50:0]| x0 x1 x2))))
(assert (forall ((x1 Int)(x2 Int)) (=> (and (|bcopy_aux[32:3]| x1 x2) (and (<= 0 x2) (<= (+ 1 x2) x1))) (|bcopy_aux[32:1][44:0]| x1 x2))))
(assert (forall ((x1 Int)(x0 Int)) (=> (= x0 0) (|bcopy_aux[32:3]| x1 x0))))
(check-sat)
(get-model)
(exit)
