(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/mochi/gib.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_23[210:0]| ( Int) Bool)
(declare-fun |gib[174:3][205:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |gib[192:3][195:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |gib[192:2]| ( Int  Int  Int) Bool)
(declare-fun |gib[180:3][188:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |gib[180:2]| ( Int  Int  Int) Bool)
(declare-fun |gib[174:2]| ( Int  Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_23[210:0]| x0))))
(assert (forall ((x0 Int)(x4 Int)(x3 Int)) (=> (and (|gib[174:3][205:0]| 0 1 x3 x4) (<= (+ 1 x4) 0)) (|fail_23[210:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x4 Int)(var144 Int)(var142 Int)(var145 Int)(var143 Int)) (=> (and (|gib[192:3][195:0]| x1 x2 var142 var143) (and (|gib[180:3][188:0]| x1 x2 var144 var145) (and (|gib[174:2]| x1 x2 x3) (and (not (= x3 0)) (and (not (= x3 1)) (and (= (+ 1 var144) x3) (and (= (+ 2 var142) x3) (= x4 (+ var145 var143))))))))) (|gib[174:3][205:0]| x1 x2 x3 x4))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x0 Int)) (=> (and (|gib[192:2]| x1 x2 x3) (and (= x3 0) (= x0 x1))) (|gib[192:3][195:0]| x1 x2 x3 x0))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Int)(var146 Int)(x4 Int)) (=> (and (|gib[180:3][188:0]| x1 x2 var146 x4) (and (|gib[174:2]| x1 x2 x3) (and (= (+ 2 x0) x3) (and (= (+ 1 var146) x3) (and (not (= x3 0)) (not (= x3 1))))))) (|gib[192:2]| x1 x2 x0))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x4 Int)) (=> (and (|gib[180:2]| x1 x2 x3) (and (= x3 1) (= x4 x2))) (|gib[180:3][188:0]| x1 x2 x3 x4))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Int)) (=> (and (|gib[174:2]| x1 x2 x3) (and (= (+ 1 x0) x3) (and (not (= x3 0)) (not (= x3 1))))) (|gib[180:2]| x1 x2 x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (= x0 0) (= x1 1)) (|gib[174:2]| x0 x1 x2))))
(check-sat)
(get-model)
(exit)
