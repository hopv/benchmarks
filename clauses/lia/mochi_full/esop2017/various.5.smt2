(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/esop2017/various.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_36[0:0]| ( Int) Bool)
(declare-fun |mult[0:3][0:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |mult[0:2]| ( Int  Int  Int) Bool)
(declare-fun |mc91[0:2][0:0]| ( Int  Int  Int) Bool)
(declare-fun |mc91[0:1]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_36[0:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|mult[0:3][0:0]| x1 x1 x1 x2) (and (|mc91[0:2][0:0]| x1 x1 91) (and (>= x1 (+ 1 x2)) (<= x1 101)))) (|fail_36[0:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x0 Int)) (=> (and (|mult[0:2]| x1 x2 x3) (and (= x0 0) (or (<= x2 0) (<= x3 0)))) (|mult[0:3][0:0]| x1 x2 x3 x0))))
(assert (forall ((x2 Int)(x0 Int)(x1 Int)) (=> (and (|mc91[0:2][0:0]| x2 x2 91) (and (<= x2 101) (and (= x0 x2) (= x0 x1)))) (|mult[0:2]| x2 x0 x1))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|mc91[0:1]| x1 x2) (and (= (+ 10 x0) x2) (>= x2 101))) (|mc91[0:2][0:0]| x1 x2 x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (<= x1 101) (= x1 x0)) (|mc91[0:1]| x1 x0))))
(check-sat)
(get-model)
(exit)
