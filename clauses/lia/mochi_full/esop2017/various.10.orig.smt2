(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/esop2017/various.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_33[505:0]| ( Int) Bool)
(declare-fun |sum[488:2][500:0]| ( Int  Int  Int) Bool)
(declare-fun |sum[491:2][494:0]| ( Int  Int  Int) Bool)
(declare-fun |sum[491:1]| ( Int  Int) Bool)
(declare-fun |sum[488:1]| ( Int  Int) Bool)
(declare-fun |main_20[486:0]| ( Int) Bool)
(declare-fun |mult[460:3][481:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |mult[463:3][475:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |mult[466:3][469:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |mult[466:2]| ( Int  Int  Int) Bool)
(declare-fun |mult[463:2]| ( Int  Int  Int) Bool)
(declare-fun |mult[460:2]| ( Int  Int  Int) Bool)
(declare-fun |mc91[444:2][447:0]| ( Int  Int  Int) Bool)
(declare-fun |mc91[444:1]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_33[505:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|main_20[486:0]| x1) (and (|sum[488:2][500:0]| x1 x1 x2) (>= x1 (+ 1 x2)))) (|fail_33[505:0]| x0))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)(var670 Int)(var669 Int)) (=> (and (|sum[488:1]| x1 x0) (and (|sum[491:2][494:0]| x1 var669 var670) (and (= x2 (+ x0 var670)) (and (>= x0 1) (= (+ 1 var669) x0))))) (|sum[488:2][500:0]| x1 x0 x2))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|sum[491:1]| x1 x2) (and (= x0 0) (<= x2 0))) (|sum[491:2][494:0]| x1 x2 x0))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)) (=> (and (|sum[488:1]| x1 x2) (and (= (+ 1 x0) x2) (>= x2 1))) (|sum[491:1]| x1 x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|main_20[486:0]| x1) (= x1 x0)) (|sum[488:1]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|mult[460:3][481:0]| x0 x0 x0 x1) (and (|mc91[444:2][447:0]| x0 x0 91) (and (<= x0 x1) (<= x0 101)))) (|main_20[486:0]| x0))))
(assert (forall ((x2 Int)(x1 Int)(x0 Int)(x3 Int)(var672 Int)(var671 Int)) (=> (and (|mult[460:2]| x2 x1 x0) (and (|mult[463:3][475:0]| x2 x1 var671 var672) (and (= x3 (+ x1 var672)) (and (>= x1 1) (and (>= x0 1) (= (+ 1 var671) x0)))))) (|mult[460:3][481:0]| x2 x1 x0 x3))))
(assert (forall ((x2 Int)(x1 Int)(x0 Int)(x3 Int)(var674 Int)(var673 Int)) (=> (and (|mult[463:2]| x2 x1 x0) (and (|mult[466:3][469:0]| x2 x1 var673 var674) (and (= x3 (+ x1 var674)) (and (>= x1 1) (and (>= x0 1) (= (+ 1 var673) x0)))))) (|mult[463:3][475:0]| x2 x1 x0 x3))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x0 Int)) (=> (and (|mult[466:2]| x1 x2 x3) (and (= x0 0) (or (<= x2 0) (<= x3 0)))) (|mult[466:3][469:0]| x1 x2 x3 x0))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Int)) (=> (and (|mult[463:2]| x1 x2 x3) (and (= (+ 1 x0) x3) (and (>= x2 1) (>= x3 1)))) (|mult[466:2]| x1 x2 x0))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Int)) (=> (and (|mult[460:2]| x1 x2 x3) (and (= (+ 1 x0) x3) (and (>= x2 1) (>= x3 1)))) (|mult[463:2]| x1 x2 x0))))
(assert (forall ((x2 Int)(x0 Int)(x1 Int)) (=> (and (|mc91[444:2][447:0]| x2 x2 91) (and (<= x2 101) (and (= x0 x2) (= x0 x1)))) (|mult[460:2]| x2 x0 x1))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|mc91[444:1]| x1 x2) (and (= (+ 10 x0) x2) (>= x2 101))) (|mc91[444:2][447:0]| x1 x2 x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (<= x1 101) (= x1 x0)) (|mc91[444:1]| x1 x0))))
(check-sat)
(get-model)
(exit)
