(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/esop2017/various.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_39[141:0]| ( Int) Bool)
(declare-fun |mc91[119:2][136:0]| ( Int  Int  Int) Bool)
(declare-fun |mc91[129:2][132:0]| ( Int  Int  Int) Bool)
(declare-fun |mc91[129:1]| ( Int  Int) Bool)
(declare-fun |mc91[122:2][125:0]| ( Int  Int  Int) Bool)
(declare-fun |mc91[122:1]| ( Int  Int) Bool)
(declare-fun |mc91[119:1]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_39[141:0]| x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|mc91[119:2][136:0]| x1 x1 x2) (and (not (= x2 91)) (<= x1 101))) (|fail_39[141:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(var240 Int)(var241 Int)) (=> (and (|mc91[129:2][132:0]| x0 var241 x2) (and (|mc91[119:1]| x0 x1) (and (|mc91[122:2][125:0]| x0 var240 var241) (and (<= x1 100) (= var240 (+ 11 x1)))))) (|mc91[119:2][136:0]| x0 x1 x2))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|mc91[129:1]| x1 x2) (and (= (+ 10 x0) x2) (>= x2 101))) (|mc91[129:2][132:0]| x1 x2 x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)(var242 Int)) (=> (and (|mc91[119:1]| x0 x1) (and (|mc91[122:2][125:0]| x0 var242 x2) (and (<= x1 100) (= var242 (+ 11 x1))))) (|mc91[129:1]| x0 x2))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|mc91[122:1]| x1 x2) (and (= (+ 10 x0) x2) (>= x2 101))) (|mc91[122:2][125:0]| x1 x2 x0))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)) (=> (and (|mc91[119:1]| x1 x2) (and (= x0 (+ 11 x2)) (<= x2 100))) (|mc91[122:1]| x1 x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (<= x1 101) (= x1 x0)) (|mc91[119:1]| x1 x0))))
(check-sat)
(get-model)
(exit)
