(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/esop2017/queen_simple.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_30[80:0]| ( Int) Bool)
(declare-fun |loop[41:3][73:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |assign[65:4][67:0]| ( Int  Int  Int  Int  Int) Bool)
(declare-fun |assign[65:6]| ( Int  Int  Int  Int  Int  Int) Bool)
(declare-fun |loop[41:3][43:1][58:0]| ( Int  Int  Int  Int  Int) Bool)
(declare-fun |loop[41:3][43:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |loop[41:2]| ( Int  Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_30[80:0]| x0))))
(assert (forall ((x0 Int)(x4 Int)(x1 Int)) (=> (and (|loop[41:3][73:0]| 0 x4 x4 x1) (and (>= x4 1) (or (>= 0 (+ 1 x1)) (>= x1 x4)))) (|fail_30[80:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)(x3 Int)(var156 Int)) (=> (and (|assign[65:4][67:0]| x0 x1 x2 x0 x3) (and (|loop[41:2]| x1 x2 x0) (and (|loop[41:3][43:1][58:0]| x1 x2 x0 x1 var156) (>= var156 x2)))) (|loop[41:3][73:0]| x1 x2 x0 x3))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(x3 Int)(x4 Int)(x5 Int)) (=> (|assign[65:6]| x0 x1 x2 x3 x4 x5) (|assign[65:4][67:0]| x0 x1 x2 x3 x4))))
(assert (forall ((x3 Int)(x4 Int)(x5 Int)(x2 Int)(x1 Int)(x0 Int)(x6 Int)) (=> (and (|loop[41:2]| x4 x5 x3) (and (|loop[41:3][43:1][58:0]| x4 x5 x3 x4 x6) (and (= x0 0) (and (= x3 x2) (and (= x4 x1) (>= x6 x5)))))) (|assign[65:6]| x3 x4 x5 x2 x1 x0))))
(assert (forall ((x2 Int)(x3 Int)(x4 Int)(x0 Int)(x1 Int)) (=> (and (|loop[41:2]| x2 x3 x4) (and (|loop[41:3][43:0]| 0 x3 x3 x0) (and (= x2 0) (and (= x1 0) (and (<= 0 x0) (and (<= (+ 1 x0) x3) (and (>= x3 1) (= x4 x3)))))))) (|loop[41:3][43:1][58:0]| x2 x3 x4 x0 x1))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(x0 Int)) (=> (and (|loop[41:2]| x1 x2 x3) (= x0 x1)) (|loop[41:3][43:0]| x1 x2 x3 x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (= x0 0) (and (>= x2 1) (= x2 x1))) (|loop[41:2]| x0 x2 x1))))
(check-sat)
(get-model)
(exit)
