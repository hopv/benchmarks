(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/esop2017/twice.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_22[143:0]| ( Int) Bool)
(declare-fun |mult[121:2][138:0]| ( Int  Int  Int) Bool)
(declare-fun |mult[127:2][130:0]| ( Int  Int  Int) Bool)
(declare-fun |mult[127:1]| ( Int  Int) Bool)
(declare-fun |mult[121:1]| ( Int  Int) Bool)
(declare-fun |mult[114:2][117:0]| ( Int  Int  Int) Bool)
(declare-fun |mult[114:1]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_22[143:0]| x0))))
(assert (forall ((x0 Int)(x4 Int)(x2 Int)(x1 Int)(x3 Int)) (=> (and (|mult[121:2][138:0]| x2 x3 x4) (and (|mult[114:2][117:0]| x2 x1 x3) (and (>= 0 (+ 1 x4)) (and (<= (+ 1 x2) 0) (>= x1 1))))) (|fail_22[143:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(var91 Int)(var92 Int)) (=> (and (|mult[127:2][130:0]| x1 var91 var92) (and (|mult[121:1]| x1 x2) (and (= var91 (+ 1 x2)) (and (= (+ x3 x1) var92) (<= (+ 1 x2) 0))))) (|mult[121:2][138:0]| x1 x2 x3))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|mult[127:1]| x1 x2) (and (= x0 0) (= x2 0))) (|mult[127:2][130:0]| x1 x2 x0))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)) (=> (and (|mult[121:1]| x1 x2) (and (= x0 (+ 1 x2)) (<= (+ 1 x2) 0))) (|mult[127:1]| x1 x0))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|mult[114:2][117:0]| x1 x0 x2) (and (<= (+ 1 x1) 0) (>= x0 1))) (|mult[121:1]| x1 x2))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|mult[114:1]| x1 x2) (and (= x0 0) (= x2 0))) (|mult[114:2][117:0]| x1 x2 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (<= (+ 1 x0) 0) (>= x1 1)) (|mult[114:1]| x0 x1))))
(check-sat)
(get-model)
(exit)
