(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/esop2017/risers.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_97[131:0]| ( Int) Bool)
(declare-fun |risers[121:2][124:0]| ( Int  Int) Bool)
(declare-fun |risers[121:0]| ( Int) Bool)
(declare-fun |risers[33:1][83:1][106:0]| ( Int  Int  Int) Bool)
(declare-fun |make_list[12:1][29:1][87:1][102:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |make_list[12:1][29:1][87:0]| ( Int  Int  Int) Bool)
(declare-fun |risers[33:1][83:0]| ( Int  Int) Bool)
(declare-fun |risers[33:1][46:1][69:0]| ( Int  Int  Int) Bool)
(declare-fun |make_list[12:1][29:1][50:1][65:0]| ( Int  Int  Int  Int) Bool)
(declare-fun |make_list[12:1][29:1][50:0]| ( Int  Int  Int) Bool)
(declare-fun |risers[33:1][46:0]| ( Int  Int) Bool)
(declare-fun |risers[33:0]| ( Int) Bool)
(declare-fun |make_list[12:1][29:0]| ( Int  Int) Bool)
(declare-fun |make_list[15:1][18:0]| ( Int  Int) Bool)
(declare-fun |make_list[15:0]| ( Int) Bool)
(declare-fun |make_list[12:0]| ( Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_97[131:0]| x0))))
(assert (forall ((x0 Int)(x3 Int)(x1 Int)(var44 Int)(x2 Int)(var45 Int)) (=> (and (|risers[121:2][124:0]| var44 x3) (and (|risers[33:1][46:1][69:0]| x1 1 var45) (and (|risers[33:1][83:1][106:0]| x1 0 x2) (and (|risers[33:0]| x1) (and (<= x3 0) (and (= x1 (+ 1 var44)) (and (>= x1 2) (>= x2 var45)))))))) (|fail_97[131:0]| x0))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|risers[121:0]| x1) (and (= x0 0) (<= x1 0))) (|risers[121:2][124:0]| x1 x0))))
(assert (forall ((x4 Int)(x3 Int)(x1 Int)(x2 Int)) (=> (and (|risers[33:1][46:1][69:0]| x3 1 x2) (and (|risers[33:1][83:1][106:0]| x3 0 x1) (and (|risers[33:0]| x3) (and (= x3 (+ 1 x4)) (and (>= x3 2) (>= x1 x2)))))) (|risers[121:0]| x4))))
(assert (forall ((x3 Int)(x1 Int)(x2 Int)(x0 Int)) (=> (and (|risers[33:0]| x3) (and (|make_list[12:1][29:1][87:1][102:0]| x0 x3 x1 x2) (|make_list[12:1][29:0]| x0 x3))) (|risers[33:1][83:1][106:0]| x3 x1 x2))))
(assert (forall ((x2 Int)(x3 Int)(x0 Int)(x1 Int)(var48 Int)(var50 Int)(var49 Int)) (=> (and (|make_list[12:1][29:1][87:0]| x2 var48 x0) (and (|make_list[15:1][18:0]| var49 var50) (and (|make_list[12:1][29:0]| x2 x3) (and (|make_list[12:0]| x2) (and (= var48 (+ 1 var50)) (and (= x3 (+ 1 var50)) (and (= (+ 1 var49) x2) (and (= x0 0) (>= x2 1))))))))) (|make_list[12:1][29:1][87:1][102:0]| x2 x3 x0 x1))))
(assert (forall ((x2 Int)(x0 Int)(x1 Int)) (=> (and (|make_list[12:0]| x2) (and (|risers[33:1][83:0]| x0 x1) (|make_list[12:1][29:0]| x2 x0))) (|make_list[12:1][29:1][87:0]| x2 x0 x1))))
(assert (forall ((x1 Int)(x2 Int)(var51 Int)) (=> (and (|risers[33:1][46:1][69:0]| x1 1 var51) (and (|risers[33:0]| x1) (and (= x2 0) (>= x1 2)))) (|risers[33:1][83:0]| x1 x2))))
(assert (forall ((x3 Int)(x1 Int)(x2 Int)(x0 Int)) (=> (and (|risers[33:0]| x3) (and (|make_list[12:1][29:1][50:1][65:0]| x0 x3 x1 x2) (|make_list[12:1][29:0]| x0 x3))) (|risers[33:1][46:1][69:0]| x3 x1 x2))))
(assert (forall ((x2 Int)(x3 Int)(x0 Int)(x1 Int)(var54 Int)(var56 Int)(var55 Int)) (=> (and (|make_list[12:1][29:1][50:0]| x2 var54 x0) (and (|make_list[15:1][18:0]| var55 var56) (and (|make_list[12:1][29:0]| x2 x3) (and (|make_list[12:0]| x2) (and (= var54 (+ 1 var56)) (and (= x3 (+ 1 var56)) (and (= (+ 1 var55) x2) (and (= x0 0) (>= x2 1))))))))) (|make_list[12:1][29:1][50:1][65:0]| x2 x3 x0 x1))))
(assert (forall ((x2 Int)(x0 Int)(x1 Int)) (=> (and (|make_list[12:0]| x2) (and (|risers[33:1][46:0]| x0 x1) (|make_list[12:1][29:0]| x2 x0))) (|make_list[12:1][29:1][50:0]| x2 x0 x1))))
(assert (forall ((x1 Int)(x2 Int)) (=> (and (|risers[33:0]| x1) (and (= x2 1) (>= x1 2))) (|risers[33:1][46:0]| x1 x2))))
(assert (forall ((x1 Int)(x0 Int)) (=> (|make_list[12:1][29:0]| x0 x1) (|risers[33:0]| x1))))
(assert (forall ((x0 Int)(x1 Int)(var57 Int)(var58 Int)) (=> (and (|make_list[15:1][18:0]| var57 var58) (and (|make_list[12:0]| x0) (and (= (+ 1 var57) x0) (and (= x1 (+ 1 var58)) (>= x0 1))))) (|make_list[12:1][29:0]| x0 x1))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|make_list[15:0]| x1) (and (= x0 0) (<= x1 0))) (|make_list[15:1][18:0]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|make_list[12:0]| x1) (and (= (+ 1 x0) x1) (>= x1 1))) (|make_list[15:0]| x0))))
(assert (forall ((x0 Int)) (|make_list[12:0]| x0)))
(check-sat)
(get-model)
(exit)
