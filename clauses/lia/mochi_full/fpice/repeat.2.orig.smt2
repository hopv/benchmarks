(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/fpice/repeat.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_14[67:0]| ( Int) Bool)
(declare-fun |repeat[38:3][62:0]| ( Int  Int  Int) Bool)
(declare-fun |repeat[38:0][50:1][56:0]| ( Int  Int) Bool)
(declare-fun |repeat[38:0][50:0]| ( Int) Bool)
(declare-fun |repeat[41:3][44:0]| ( Int  Int  Int) Bool)
(declare-fun |repeat[41:2]| ( Int  Int) Bool)
(declare-fun |repeat[38:2]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_14[67:0]| x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|repeat[38:3][62:0]| x1 0 x2) (<= (+ 1 x2) x1)) (|fail_14[67:0]| x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)(var40 Int)(var41 Int)) (=> (and (|repeat[41:3][44:0]| var40 x1 var41) (and (|repeat[38:2]| x0 x1) (and (|repeat[38:0][50:1][56:0]| var41 x2) (and (= (+ 1 var40) x0) (not (= x0 0)))))) (|repeat[38:3][62:0]| x0 x1 x2))))
(assert (forall ((x1 Int)(x2 Int)) (=> (and (|repeat[38:0][50:0]| x1) (= x2 (+ 1 x1))) (|repeat[38:0][50:1][56:0]| x1 x2))))
(assert (forall ((x2 Int)(x0 Int)(var42 Int)(x1 Int)) (=> (and (|repeat[38:2]| x0 x1) (and (|repeat[41:3][44:0]| var42 x1 x2) (and (not (= x0 0)) (= (+ 1 var42) x0)))) (|repeat[38:0][50:0]| x2))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|repeat[41:2]| x1 x2) (and (= x1 0) (= x0 x2))) (|repeat[41:3][44:0]| x1 x2 x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|repeat[38:2]| x1 x2) (and (= (+ 1 x0) x1) (not (= x1 0)))) (|repeat[41:2]| x0 x2))))
(assert (forall ((x1 Int)(x0 Int)) (=> (= x0 0) (|repeat[38:2]| x1 x0))))
(check-sat)
(get-model)
(exit)
