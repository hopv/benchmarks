(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/fpice/inductive4.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_12[112:0]| ( Int) Bool)
(declare-fun |f[51:2][107:0]| ( Int  Int) Bool)
(declare-fun |f[57:2][103:0]| ( Int  Int) Bool)
(declare-fun |f[57:0][65:1][97:0]| ( Int  Int) Bool)
(declare-fun |f[67:2][95:0]| ( Int  Int) Bool)
(declare-fun |f[67:0][75:1][89:0]| ( Int  Int) Bool)
(declare-fun |f[51:0][79:1][85:0]| ( Int  Int) Bool)
(declare-fun |f[51:0][79:0]| ( Int) Bool)
(declare-fun |f[67:0][75:0]| ( Int) Bool)
(declare-fun |f[67:1]| ( Int) Bool)
(declare-fun |f[57:0][65:0]| ( Int) Bool)
(declare-fun |f[57:1]| ( Int) Bool)
(declare-fun |f[51:1]| ( Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_12[112:0]| x0))))
(assert (forall ((x0 Int)(x2 Int)) (=> (and (|f[51:2][107:0]| 3 x2) (<= (+ 4 x2) 0)) (|fail_12[112:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(var21 Int)) (=> (and (|f[57:2][103:0]| var21 x2) (and (|f[51:1]| x1) (and (= (+ 2 var21) x1) (>= x1 2)))) (|f[51:2][107:0]| x1 x2))))
(assert (forall ((x1 Int)(x2 Int)) (=> (and (|f[57:1]| x1) (and (|f[57:0][65:1][97:0]| x1 x2) (and (<= x1 1) (>= (+ 3 x1) 0)))) (|f[57:2][103:0]| x1 x2))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|f[67:2][95:0]| x1 x2) (and (|f[51:1]| x0) (>= x0 2))) (|f[57:0][65:1][97:0]| x1 x2))))
(assert (forall ((x1 Int)(x2 Int)) (=> (and (|f[67:1]| x1) (and (|f[67:0][75:1][89:0]| x1 x2) (and (<= x1 1) (>= (+ 3 x1) 0)))) (|f[67:2][95:0]| x1 x2))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|f[51:0][79:1][85:0]| x1 x2) (and (|f[51:1]| x0) (>= x0 2))) (|f[67:0][75:1][89:0]| x1 x2))))
(assert (forall ((x1 Int)(x2 Int)) (=> (and (|f[51:0][79:0]| x1) (= x2 (+ 1 x1))) (|f[51:0][79:1][85:0]| x1 x2))))
(assert (forall ((x2 Int)(x0 Int)) (=> (and (|f[67:0][75:0]| x2) (and (|f[51:1]| x0) (>= x0 2))) (|f[51:0][79:0]| x2))))
(assert (forall ((x2 Int)) (=> (and (|f[67:1]| x2) (and (<= x2 1) (>= (+ 3 x2) 0))) (|f[67:0][75:0]| x2))))
(assert (forall ((x1 Int)(x0 Int)) (=> (and (|f[57:0][65:0]| x1) (and (|f[51:1]| x0) (>= x0 2))) (|f[67:1]| x1))))
(assert (forall ((x2 Int)) (=> (and (|f[57:1]| x2) (and (<= x2 1) (>= (+ 3 x2) 0))) (|f[57:0][65:0]| x2))))
(assert (forall ((x0 Int)(x1 Int)) (=> (and (|f[51:1]| x1) (and (= (+ 2 x0) x1) (>= x1 2))) (|f[57:1]| x0))))
(assert (forall ((x0 Int)) (=> (= x0 3) (|f[51:1]| x0))))
(check-sat)
(get-model)
(exit)
