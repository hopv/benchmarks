(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/fpice/inductive.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_18[0:0]| ( Int) Bool)
(declare-fun |loop[0:2][0:0]| ( Int  Int  Int) Bool)
(declare-fun |loop[0:1]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_18[0:0]| x0))))
(assert (forall ((x0 Int)(x2 Int)(x1 Int)) (=> (and (|loop[0:2][0:0]| 3 x1 x2) (<= x2 2)) (|fail_18[0:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(var59 Int)(var60 Int)) (=> (and (|loop[0:2][0:0]| var59 var60 x3) (and (|loop[0:1]| x1 x2) (and (<= x1 2) (and (>= x1 1) (and (= (+ var59 x1) 3) (and (= (+ 1 var60) x2) (>= x2 0))))))) (|loop[0:2][0:0]| x1 x2 x3))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|loop[0:1]| x1 x2) (and (<= (+ 1 x2) 0) (= x0 x1))) (|loop[0:2][0:0]| x1 x2 x0))))
(assert (forall ((x1 Int)(x0 Int)(x3 Int)(x2 Int)) (=> (and (|loop[0:1]| x2 x3) (and (= (+ 1 x0) x3) (and (= (+ x1 x2) 3) (and (>= x3 0) (and (<= x2 2) (>= x2 1)))))) (|loop[0:1]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (= x0 3) (|loop[0:1]| x0 x1))))
(check-sat)
(get-model)
(exit)
