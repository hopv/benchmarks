(set-logic HORN)
(set-info :source |
  Benchmark: test_safe_2019/fpice/inductive.ml
  Generated by MoCHi
|)
(set-info :status unknown)
(declare-fun |fail_21[209:0]| ( Int) Bool)
(declare-fun |loop[186:2][204:0]| ( Int  Int  Int) Bool)
(declare-fun |loop[195:2][198:0]| ( Int  Int  Int) Bool)
(declare-fun |loop[195:1]| ( Int  Int) Bool)
(declare-fun |loop[186:1]| ( Int  Int) Bool)
(declare-fun |loop[163:2][181:0]| ( Int  Int  Int) Bool)
(declare-fun |loop[172:2][175:0]| ( Int  Int  Int) Bool)
(declare-fun |loop[172:1]| ( Int  Int) Bool)
(declare-fun |loop[163:1]| ( Int  Int) Bool)
(assert (not (exists ((x0 Int)) (|fail_21[209:0]| x0))))
(assert (forall ((x0 Int)(x3 Int)(x2 Int)(x1 Int)) (=> (and (|loop[186:2][204:0]| 1 x1 x3) (and (|loop[163:2][181:0]| 3 x1 x2) (and (<= (+ 1 x3) 0) (>= x2 3)))) (|fail_21[209:0]| x0))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(var227 Int)(var228 Int)) (=> (and (|loop[195:2][198:0]| var227 var228 x3) (and (|loop[186:1]| x1 x2) (and (<= x1 2) (and (>= x1 1) (and (= (+ var227 x1) 3) (and (= (+ 1 var228) x2) (>= x2 0))))))) (|loop[186:2][204:0]| x1 x2 x3))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|loop[195:1]| x1 x2) (and (<= (+ 1 x2) 0) (= x0 x1))) (|loop[195:2][198:0]| x1 x2 x0))))
(assert (forall ((x1 Int)(x0 Int)(x3 Int)(x2 Int)) (=> (and (|loop[186:1]| x2 x3) (and (= (+ 1 x0) x3) (and (= (+ x1 x2) 3) (and (>= x3 0) (and (<= x2 2) (>= x2 1)))))) (|loop[195:1]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)(x2 Int)) (=> (and (|loop[163:2][181:0]| 3 x1 x2) (and (= x0 1) (>= x2 3))) (|loop[186:1]| x0 x1))))
(assert (forall ((x1 Int)(x2 Int)(x3 Int)(var229 Int)) (=> (and (|loop[172:2][175:0]| x1 var229 x3) (and (|loop[163:1]| x1 x2) (and (= (+ 1 var229) x2) (and (>= x2 0) (>= x1 3))))) (|loop[163:2][181:0]| x1 x2 x3))))
(assert (forall ((x1 Int)(x2 Int)(x0 Int)) (=> (and (|loop[172:1]| x1 x2) (and (<= (+ 1 x2) 0) (= x0 x1))) (|loop[172:2][175:0]| x1 x2 x0))))
(assert (forall ((x1 Int)(x0 Int)(x2 Int)) (=> (and (|loop[163:1]| x1 x2) (and (= (+ 1 x0) x2) (and (>= x2 0) (>= x1 3)))) (|loop[172:1]| x1 x0))))
(assert (forall ((x0 Int)(x1 Int)) (=> (= x0 3) (|loop[163:1]| x0 x1))))
(check-sat)
(get-model)
(exit)
